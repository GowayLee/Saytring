# Definition of string variable
define var as ("init var")
define var2 as ("init var2")

# Definition of integer variable
define num as (1234)

# Definition of boolean variable
define bool_var as (true)

# Assign
set var as ("another str")
set num as (4321)
set bool_var as (false)

# Declaration of property
var has [length]
var2 has [length, digit_count]

# Assign to property
set var's length as (10)
set var2's digit_count as (20)

# I/O expressions
define password as ("")
ask "Enter password: " as password
ask as password
say (var)
say ("Thankyou")

# Plain call expression
var do reverse
var do get_length on length
var do substring using [1, 3]
var do substring using [1, 3] on length
var do substring using [num, 12] on length

# Chain call expression
var has [length]
var do reverse -> do substring using [1, 3] -> do get_length on length
var do reverse
 -> (if bool_var then do get_length on length)
 -> do get_length on length
 -> (if bool_var then do xixi using [var1, var3, "feiqilai"])

var's length do reverse on var's feiji
          -> do count_digit on var's length

# Conditional expression
if bool_var then
  var do reverse
else
  var do xixi
endif

# Complex nested
var has [reverse_str, reverse_str_len]
var do substring_from_start using [var's reverse_str] on reverse_str_len
          -> do xixixi using ["feiqilai", var2's len, roti]

set var's length as (var2 do reverse)
say (var do xixi -> do reverse on nihao)

# Comparison Expression
password gt "1234";
1234 eq 1234;
4321 ne 1234;
var le var2;
